function popbrowser(gp)
%POPBROWSER Visually browse complexity and performance characteristics of a population.
%
%   POPBROWSER(GP) shows a plot of the current population on the axes
%   fitness vs complexity. The Pareto front is plotted as a series of green
%   circles. Non Pareto front individuals are shown as blue circles. The
%   best individual (as evaluated on the training data) is highlighted with
%   a red circle.
%
%   For multigene symbolic regression, POPBROWSER(GP) shows a scatterplot
%   of 1 - R^2 (coefficient of determination) vs expressional complexity.
%   By default 1 - R^2 is calculated on the training data.
%
%   Clicking on a circle reveals the numeric population identifier ID of
%   the corresponding GP individual(s) and, if a multigene regression
%   model, a simplified overall model equation (to 2 digits of precision
%   using the 'fast' MuPAD simplification mode).
%
%   Additionally, for multigene regression models:
%
%   To specify a different data set to compute 1 - R^2 on, use
%
%   POPBROWSER(GP,DATASET) where DATASET can equal 'train','val' or 'test'.
%   
%   POPBROWSER(GP,DATASET,ID) adds a magenta dot to represent a user
%   supplied model identifier ID, which can be a numeric model ID of a
%   multigene model in the GP population or the 'best', 'valbest' or
%   'testbest' model. ID can also be a struct representing a multigene
%   regression model generated by GPMODEL2STRUCT or GENES2GPMODEL. This is
%   useful for examining the performance of user tailored models when used
%   in conjunction with UNIQUEGENES and GENEBROWSER.
%
%   The plotted tree complexity is by default 'expressional complexity'
%   even if the run was performed using 'node count' as a measure of
%   complexity. However, either measure can be displayed by setting
%   COMPLEXITYTYPE to 1 (expressional) or 0 (node count) using:
%
%   POPBROWSER(GP,DATASET,ID,COMPLEXITYTYPE) where ID may be set to empty
%   ([]) if you don't want to plot a user supplied model.
%
%   To plot a log Y-axis use:
%
%   POPBROWSER(GP,DATASET,ID,COMPLEXITYTYPE,LOGR2) with LOGR2 = TRUE. This
%   gives better visual resolution between high performance models.
%
%   Copyright (c) 2009-2015 Dominic Searson
%
%   GPTIPS 2
%
%   See also SUMMARY, RUNTREE, GPMODELREPORT, PARETOREPORT, GPMODELFILTER,
%   GENEBROWSER, GENES2GPMODEL, UNIQUEGENES

gp.info.toolbox.symbolic =1;

    [xs, index] = sort(gp.history.fitness);

    OrderedModels=gp.history.models(index);
    OrderedFitness=gp.history.fitness(index);
    OrderedCoefs=gp.history.coefs(index);

    [n_rows n_vars ]=size(gp.xtrain);
    for i=1:length(OrderedModels) 
    c{i,1} = func2str(OrderedModels{i});
    end
   


    [Order,indx] = unique(c);
   gp.unique.UniqOrderedModelStr = c(sort(indx));
    gp.unique.UniqOrderedCoef= OrderedCoefs(sort(indx));
    gp.unique.UniqOrderedFitness= OrderedFitness(sort(indx));
  SSQ=sum((gp.ytrain-mean(gp.ytrain)).^2);  
   gp.unique.UniqOrderedr2= 1- gp.unique.UniqOrderedFitness/SSQ;
    for i=1:length(gp.unique.UniqOrderedModelStr)
    gp.unique.UniqOrderedModels{i,1}=str2func(gp.unique.UniqOrderedModelStr{i});
    end


for i=1:length(gp.unique.UniqOrderedModelStr)
gp.unique.UniqOrderedNCoef(i,1)=length(gp.unique.UniqOrderedCoef{i});
end


if gp.runcontrol.pop_size > 750
    disp('Please wait, performing Pareto sort of population ...');
end

browserFig = figure('visible','off'); set(browserFig,'name','GPTIPS 2 Population browser');
ax1 = gca; set(ax1 ,'box','on')

if ~isempty(gp.userdata.name)
    setname = ['Data: ' gp.userdata.name];
else
    setname = '';
end

%string for figure title
mergeStr = '';
if gp.info.merged && gp.info.filtered
    mergeStr = ' (merged & filtered)';
elseif gp.info.merged
    mergeStr = ' (merged)';
elseif gp.info.filtered
    mergeStr = ' (filtered)';
end

%multigene regression
mgmodel = false;


gp.fitness.r2train = 1 - gp.unique.UniqOrderedFitness /  SSQ;
    mgmodel = true;
    
   
        yvals = 1 - gp.fitness.r2train;
        ylabelContent = '1-R^2 (training)';

        

    %plot all models' 1-R2

        bluedots = plot(ax1,gp.unique.UniqOrderedNCoef,yvals,'o');
 
    set(bluedots,'markeredgecolor','none','markerfacecolor',[0 0.45 0.74]);
    hold on;
    

    
    %highlight models on the pareto front with green circles

        xrank = ndfsort_rank1([yvals gp.unique.UniqOrderedNCoef]);
        greendots = plot(ax1,gp.unique.UniqOrderedNCoef(xrank==1),yvals(xrank==1),'o');
   
    set(greendots,'markerfacecolor','green','markeredgecolor',[0.25 0.25 0.25]);
    gp.fitness.values = yvals; %for use with datacursor
    
  
   
    
  %  plot(ax1,bestComplexity,yvalBest,'ro','linewidth',2,'markersize',8);
    grid on; ylabel(ax1,ylabelContent);
    
    %for R2, always set y-axis between 0 and 1
    set(ax1,'Ylim',[0 1]);
   
    hold off;
    
    title(ax1,{['Population' mergeStr ' models = ' num2str(gp.runcontrol.pop_size)],...
        setname},'interpreter','none','FontWeight','bold');
    

grid on; set(browserFig,'userdata',gp); set(browserFig,'numbertitle','off'); set(browserFig,'visible','on');

%enable datacursor mode
dcManager = datacursormode(gcf);
if mgmodel && gp.info.toolbox.symbolic
    set(dcManager,'UpdateFcn',@disp_mgmodel);
else
    set(dcManager,'UpdateFcn',@disp_indiv);
end

set(dcManager,'SnapToDataVertex','on');
set(dcManager,'enable','on');
drawnow;

function txt = disp_indiv(~,event_obj)
%returns population member ID to datacursor.
if verLessThan('Matlab','8.4')
    gp = get(gcbf,'userdata'); %appears not to work in 2014b
else
    gp = get(gcf,'userdata'); %workaround til this is fixed
end

a = get(event_obj);
b = get(a.Target);

if strcmp(b.Type,'line')
    comp = a.Position(1);
    fitness = a.Position(2);
    
    %locate in population
    fitInd = find(gp.unique.UniqOrderedFitness==fitness);
    
 
    compInd = find(gp.unique.UniqOrderedNCoef==comp);
    
    
    ind = intersect(fitInd,compInd);
    numInds = numel(ind);
    
    txt = cell(numInds+1,1);
    txt{1} ='Individual ID: ';
    for i=1:numInds
        txt{i+1} = int2str(ind(i));
    end
else
    txt = '';
end


function txt = disp_mgmodel(~,event_obj)
%returns multigene regression model info to datacursor.
if verLessThan('Matlab','8.4')
    gp = get(gcbf,'userdata'); %appears not to work in 2014b
else
    gp = get(gcf,'userdata'); %workaround til this is fixed
end

a = get(event_obj);
b = get(a.Target);

if strcmp(b.Type,'line')
    complexity = a.Position(1);
    fitness = a.Position(2);
    
    %locate in population
    fitInd = find(1- gp.unique.UniqOrderedr2==fitness);
  
    compInd = find(gp.unique.UniqOrderedNCoef==complexity);
 
    ind = intersect(fitInd,compInd);
    numInds = numel(ind);
    
    if numInds > 0
        
        if numInds > 10
            disp('Multiple matching models: only displaying first 5.');
            ind = ind(1:5);
            numInds = 5;
        end
        
        txt = cell(numInds+1,2);
        txt{1,1} ='Individual ID: ';
        txt{1,2} ='Model: ';
        
        for i=1:numInds
            txt{i+1,1} = int2str(ind(i));
            try
                txt{i+1,2} = char(gp.unique.UniqOrderedModelStr{ind(i)}); %only display 2 chars of precision
            catch
                txt{i+1,2} = 'Invalid model';
            end
        end
        
    else
        txt = {'Model not found in population.'}; %e.g. valbest frequently isn't in final population
    end
    
else
    txt = '';
end
